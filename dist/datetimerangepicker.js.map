{"version":3,"file":"datetimerangepicker.js","sources":["../src/components/FlatPickr.vue"],"sourcesContent":["<template>\n  <input :key=\"drawFlag\" type=\"text\" data-input :disabled=\"disabled\" @input=\"onInput\">\n</template>\n\n<script>\nimport Flatpickr from 'flatpickr'\nimport 'flatpickr/dist/flatpickr.css'\nconst includedEvents = [\n  'onChange',\n  'onClose',\n  'onDestroy',\n  'onMonthChange',\n  'onOpen',\n  'onYearChange'\n]\nconst camelToKebab = (string) => { return string.replace(/([a-z])([A-Z])/g, '$1-$2').toLowerCase() }\nconst arrayify = (obj) => { return Array.isArray(obj) ? obj : [obj] }\n\nexport default {\n  name: 'flatpickr',\n  props: {\n    value: {\n      default: null,\n      required: true,\n      validator (value) {\n        return value === null || value instanceof Date || typeof value === 'string' || value instanceof String || value instanceof Array || typeof value === 'number'\n      }\n    },\n    config: {\n      type: Object,\n      default: () => ({\n        wrap: false,\n        defaultDate: null\n      })\n    },\n    events: {\n      type: Array,\n      default: () => includedEvents\n    },\n    disabled: {\n      type: Boolean,\n      default: false\n    }\n  },\n  data () {\n    return {\n      fp: null,\n      drawFlag: 0\n    }\n  },\n  mounted () {\n    this.init()\n  },\n  methods: {\n    init () {\n      if (this.fp) return\n      let safeConfig = Object.assign({}, this.config)\n      this.events.forEach((hook) => {\n        safeConfig[hook] = arrayify(safeConfig[hook] || []).concat((...args) => {\n          this.$emit(camelToKebab(hook), ...args)\n        })\n      })\n      safeConfig.defaultDate = this.value || safeConfig.defaultDate\n      this.fp = new Flatpickr(this.getElem(), safeConfig)\n      this.fpInput().addEventListener('blur', this.onBlur)\n    },\n    destroy () {\n      if (this.fp) {\n        this.fpInput().removeEventListener('blur', this.onBlur)\n        this.fp.destroy()\n        this.fp = null\n      }\n    },\n    redraw () {\n      this.drawFlag += 1\n    },\n    getElem () {\n      return this.config.wrap ? this.$el.parentNode : this.$el\n    },\n    getValue () {\n      return [...this.fp.selectedDates]\n    },\n    onInput (event) {\n      this.$nextTick(() => {\n        this.$emit('input', this.getValue())\n      })\n    },\n    fpInput () {\n      return this.fp.altInput || this.fp.input\n    },\n    onBlur (event) {\n      this.$emit('blur', this.getValue())\n    }\n  },\n  watch: {\n    config: {\n      deep: true,\n      handler (newConfig) {\n        if (this.fp) {\n          this.destroy()\n          this.init()\n        }\n      }\n    },\n    value (newValue, oldValue) {\n      if (\n        Array.isArray(newValue) && Array.isArray(oldValue) &&\n        newValue.every((val, index) => val && oldValue[index] && val.valueOf() === oldValue[index].valueOf())\n      ) { return false }\n      if (newValue.valueOf() === oldValue.valueOf()) { return false }\n      this.fp && this.fp.setDate(newValue, true)\n    },\n    disabled (newState) {\n      if (!this.fp) { return }\n      if (newState) {\n        this.fpInput().setAttribute('disabled', newState)\n      } else {\n        this.fpInput().removeAttribute('disabled')\n      }\n    }\n  },\n  beforeDestroy () {\n    this.destroy()\n  }\n}\n</script>\n"],"names":["const"],"mappings":"i5BAOAA"}